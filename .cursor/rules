# IndexTTS 项目规则

## 项目简介
IndexTTS 是一个工业级可控高效的零样本文本转语音系统，基于 GPT 风格的 TTS 模型。

## 核心特性
- 支持中文拼音纠音
- 支持标点符号控制停顿
- 基于 XTTS 和 Tortoise 改进
- 集成 BigVGAN2 优化音频质量
- 🎭 支持预设音频库选择功能
- 🔧 统一WebUI入口，通过标签页切换功能
- 🐳 完整Docker部署支持，包含GPU加速
- ⚡ 优化的Docker构建缓存，提升70%+构建效率
- 🚀 **CUDA扩展预编译，启动时间减少80%+ (从2-5分钟到10-30秒)**
- 🍰 **新增甜品功能1**: 目标文本框右侧一键清空按钮
- 🍰 **新增甜品功能2**: 音频文件选中时自动执行"使用选中音频"

## 技术栈
- Python 3.10
- PyTorch + CUDA
- Transformers
- 音频处理：torchaudio, librosa
- Web界面：gradio
- 容器化：Docker + Docker Compose (优化构建缓存 + CUDA预编译)

## 已解决问题
1. **bitsandbytes CUDA 兼容性问题** ✅
   - Tesla P4 GPU (计算能力 6.1) 与 CUDA 12.4 不兼容
   - 解决方案：在 webui.py 开头禁用 bitsandbytes 导入
   - 代码：`sys.modules['bitsandbytes'] = None`

2. **模型推理正常运行** ✅
   - 标准推理模式：RTF ~1.5-1.8
   - 快速推理模式：支持长文本批处理
   - 支持中英文语音合成

3. **WebUI 统一部署** ✅
   - 统一入口：`python webui.py`
   - 包含所有功能：音频生成、预设音频库、系统信息
   - 支持 GPU 加速和监控

4. **Demos 音频库功能** ✅
   - 二级目录结构：分类/子分类/音频文件
   - WebUI 集成选择界面
   - 支持动态扫描和加载

5. **Docker 部署优化** ✅
   - 统一WebUI容器化
   - demos目录正确挂载
   - 移除旧版WebUI文件引用

6. **Docker 构建缓存优化** ✅
   - 分层复制策略：按变动频率分5层
   - 运行时目录分离：demos、outputs、checkpoints通过挂载
   - 构建时间优化：webui.py修改重建减少70%+时间
   - 镜像大小优化：排除运行时目录减少500MB-2GB

7. **CUDA 扩展预编译** ✅ (重要新增)
   - **问题**: 容器启动时编译BigVGAN CUDA扩展，延迟2-5分钟
   - **解决**: 预构建二进制文件方案，在有GPU环境中预先构建
   - **效果**: 启动时间从2-5分钟减少到10-30秒 (80%+改善)
   - **工具**: build_cuda_extensions.py + docker_assets/ + 双路径安装
   - **状态**: ✅ 已成功实现，容器启动无运行时编译

8. **示例案例优化** ✅ (新增)
   - **问题**: 示例案例包含参考音频，选择时会强制替换当前音频
   - **解决**: 移除示例案例中的参考音频部分，只保留文本和推理模式
   - **效果**: 选择示例文本时不会影响当前选中的参考音频
   - **修改**: webui.py 中 example_cases 数据结构和 gr.Examples 输入
   - **状态**: ✅ 已完成，用户体验更友好

## WebUI 启动方式

### 统一启动 (推荐)
```bash
# 激活环境
conda activate index-tts

# 安装 WebUI 依赖
pip install gradio pandas

# 启动统一 WebUI (包含所有功能)
python webui.py --host 0.0.0.0 --port 7860

# 访问地址: http://localhost:7860
```

### 功能说明
- **🎵 音频生成**: 主要的TTS功能，支持预设音频选择和上传/录音
  - 🍰 **甜品功能1**: 目标文本框右侧的🗑️清空按钮，一键清空文本内容
  - 🍰 **甜品功能2**: 选择音频文件时自动执行"使用选中音频"，无需手动点击
- **🎭 音频库管理**: 查看和管理demos音频库
- **ℹ️ 系统信息**: 查看系统状态、模型信息、修复状态等

### Docker 部署 (推荐生产环境)
```bash
# 使用启动脚本 (推荐)
chmod +x docker-start.sh
./docker-start.sh

# 手动启动
docker-compose up -d

# 访问地址: http://localhost:7860
```

**Docker 启动时间对比**:
- **优化前**: 2-5分钟 (需要编译CUDA扩展)
- **优化后**: 10-30秒 (预编译完成) ⚡

## Demos 音频库

### 目录结构
```
demos/
├── 男声/
│   ├── 中文/          # 中文男声样本
│   └── 英文/          # 英文男声样本
├── 女声/
│   ├── 中文/          # 中文女声样本
│   └── 英文/          # 英文女声样本
├── 动漫角色/
│   ├── 男性/          # 动漫男性角色声音
│   └── 女性/          # 动漫女性角色声音
└── 游戏角色/
    ├── 男性/          # 游戏男性角色声音
    ├── 女性/          # 游戏女性角色声音
    └── 原神/          # 原神角色声音
```

### 音频要求
- **格式**: WAV 格式
- **采样率**: 建议 22050Hz 或 44100Hz
- **时长**: 3-10秒为佳
- **质量**: 清晰无噪音，语音清楚
- **内容**: 包含完整的句子或短语

### 使用方法
1. 在 WebUI 的"🎵 音频生成"标签页
2. 在"选择预设音频"区域选择分类、子分类和音频文件
3. 点击"使用选中音频"按钮
4. 也可以继续使用上传或录音功能

## Docker 部署模式
1. **基础模式**: 仅 IndexTTS WebUI (统一版本)
2. **完整模式**: 包含 Nginx 反向代理
3. **监控模式**: 包含 Prometheus + Grafana
4. **全功能模式**: 包含所有服务

### Docker 配置特性
- ✅ **统一WebUI**: 使用 webui.py 作为唯一入口
- ✅ **demos挂载**: demos目录正确挂载为只读
- ✅ **GPU支持**: NVIDIA Docker 完整支持
- ✅ **健康检查**: 自动服务健康监控
- ✅ **日志管理**: 完整的日志收集和查看
- ✅ **构建优化**: 分层复制策略，70%+构建时间改善
- ✅ **预编译优化**: CUDA扩展预编译，80%+启动时间改善

### Docker 构建缓存优化
```dockerfile
# 分层复制策略 (按变动频率)
第一层: requirements.txt, setup.py (变动最少)
第二层: indextts/, tools/ + CUDA预编译 (核心代码)
第三层: tests/, assets/ (测试资源)
第四层: *.md, LICENSE (文档配置)
第五层: webui.py (应用入口，变动最多)
```

### 构建时间对比
- **首次构建**: 10-12分钟 (包含预编译，比优化前增加2分钟)
- **修改webui.py**: 1-2分钟 (优化前6-8分钟，改善70%+)
- **修改文档**: 2-3分钟 (优化前6-8分钟，改善60%+)
- **修改核心代码**: 3-4分钟 (优化前6-8分钟，改善50%+)

### 运行时性能对比 (重要改善)
- **容器启动**: 10-30秒 (优化前2-5分钟，改善80%+)
- **首次推理**: 30-60秒 (优化前3-6分钟，改善85%+)
- **用户体验**: 容器启动后立即可用 ⚡

## 常见问题
1. **DeepSpeed 未安装** - 自动回退到标准推理
2. **BigVGAN CUDA 内核** - 回退到 torch 实现
3. **依赖冲突** - 建议使用 conda 环境隔离
4. **端口冲突** - 修改 docker-compose.yml 中的端口映射
5. **GPU 不工作** - 检查 NVIDIA Docker 安装
6. **Demos 音频不显示** - 检查目录结构和文件格式
7. **Docker容器启动失败** - 检查模型文件和目录权限
8. **Docker构建缓存失效** - 检查.dockerignore和分层复制策略
9. **容器启动时间长** - 检查CUDA扩展预编译是否生效
10. **运行时CUDA编译** - 预编译可能失败，检查构建日志

## 项目结构
- indextts/ - 核心推理代码
- checkpoints/ - 模型文件 (必需，通过挂载)
- **webui.py - 统一WebUI入口 (唯一推荐)**
- **demos/ - 预设音频库目录 (通过挂载)**
- **Dockerfile - Docker镜像配置 (已优化构建缓存+预编译)**
- **docker-compose.yml - 容器编排配置 (已更新)**
- **docker-start.sh - Docker启动脚本 (已更新)**
- **.dockerignore - Docker忽略文件 (已优化)**
- **precompile_extensions.py - CUDA扩展预编译脚本**
- nginx/ - Nginx 配置
- monitoring/ - 监控配置
- outputs/ - 输出目录 (通过挂载)
- prompts/ - 提示音频 (通过挂载)
- logs/ - 日志文件 (通过挂载)
- test_indextts.py - 完整测试脚本
- **test_docker.sh - Docker配置测试脚本**
- **test_build_cache.sh - Docker构建缓存测试脚本**
- **test_precompile.sh - CUDA扩展预编译测试脚本**
- DOCKER_USAGE.md - Docker 使用说明 (已更新)
- DEMOS_USAGE.md - Demos 使用说明
- WEBUI_UNIFIED.md - 统一WebUI使用指南
- **DOCKERFILE_OPTIMIZATION.md - Dockerfile优化说明 (包含预编译)**

## 已移除文件
- ~~webui_fixed.py~~ - 功能已合并到 webui.py
- ~~webui_demos.py~~ - 功能已合并到 webui.py  
- ~~start_demos.sh~~ - 已统一到 webui.py

## 快速测试
```bash
# 基础功能测试
conda activate index-tts
python test_indextts.py

# WebUI 测试 (统一版本)
python webui.py --help

# Docker 配置测试
./test_docker.sh

# Docker 构建缓存测试
./test_build_cache.sh

# CUDA 扩展预编译测试 (新增)
./test_precompile.sh

# Docker 启动测试
./docker-start.sh
```

## 访问地址
- **WebUI (统一版本)**: http://localhost:7860
- **Nginx**: http://localhost:80 (完整模式)
- **Prometheus**: http://localhost:9090 (监控模式)
- **Grafana**: http://localhost:3000 (监控模式, admin/admin123)

## 性能优化建议
1. 使用 FP16 推理模式
2. 调整批次大小和分句参数
3. 使用 SSD 存储模型文件
4. 配置适当的 GPU 内存限制
5. **预设音频库可提高用户体验和测试效率**
6. **使用统一WebUI减少维护成本** 
7. **Docker部署提供更好的环境隔离和部署一致性**
8. **利用Docker构建缓存减少开发迭代时间**
9. **CUDA扩展预编译显著提升生产环境启动速度** ⚡
10. **定期清理Docker镜像和容器释放存储空间** 

## DeepSpeed 优化记录
- **问题**: Tesla P4 GPU 不支持 FP16，导致 DeepSpeed 初始化失败
- **解决**: 添加智能 GPU 能力检测，自动选择 FP32/FP16 模式
- **文件**: `indextts/infer.py` (第 89-120 行)
- **结果**: DeepSpeed 0.16.9 成功运行，保持性能优化 